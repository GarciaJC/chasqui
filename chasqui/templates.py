"""Generate PBS submission scripts for VASP calculations with chasqui workflow integration"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../04_templates.ipynb.

# %% auto 0
__all__ = ['PBS_TEMPLATE', 'generate_pbs_script', 'generate_pbs_script_from_job', 'validate_pbs_script']

# %% ../04_templates.ipynb 3
from string import Template
from pathlib import Path
from typing import Optional, Dict, Any
from datetime import datetime

# %% ../04_templates.ipynb 5
PBS_TEMPLATE = """#!/bin/bash

#PBS -N $JOB_NAME
#PBS -l select=$CORES:ncpus=36:mpiprocs=36
#PBS -A $PROJECT
#PBS -l walltime=$TIME
#PBS -j oe
#PBS -o $JOB_NAME.out

# Job metadata for chasqui
JOB_ID="$JOB_ID"
CHASQUI_DIR="$CHASQUI_DIR"
WORK_DIR="$WORK_DIR"

# Change to work directory where VASP inputs are located
cd $$WORK_DIR || { echo "ERROR: Cannot cd to $$WORK_DIR"; exit 1; }

echo "======================================"
echo "Job: $JOB_NAME"
echo "Job ID: $$PBS_JOBID"
echo "Chasqui ID: $$JOB_ID"
echo "Work Directory: $$WORK_DIR"
echo "Started: $$(date)"
echo "======================================"

# Get node count from PBS
NNODES=`wc -l < $$PBS_NODEFILE`
echo "Nodes allocated: $$NNODES"

# Environment setup
ulimit -s unlimited
export OMP_NUM_THREADS=1

# Load modules
module purge
module load vasp/6.4.3

# Run VASP
echo "Running VASP..."
mpirun -np $$NNODES $VASP

# Capture exit code
EXIT_CODE=$$?

echo "======================================"
echo "VASP finished with exit code: $$EXIT_CODE"
echo "Completed: $$(date)"
echo "======================================"

# ============================================
# CHASQUI COMPLETION HANDLER (always runs)
# ============================================

if [ $$EXIT_CODE -eq 0 ]; then
    STATUS="DONE"
    echo "✓ Job completed successfully"
else
    STATUS="FAIL"
    echo "✗ Job failed with exit code $$EXIT_CODE"
fi

# Write completion flag
COMPLETED_DIR="$$CHASQUI_DIR/completed"
mkdir -p $$COMPLETED_DIR
echo "$$STATUS" > $$COMPLETED_DIR/$${JOB_ID}.flag
echo "$$PBS_JOBID" >> $$COMPLETED_DIR/$${JOB_ID}.flag
echo "$$(date)" >> $$COMPLETED_DIR/$${JOB_ID}.flag
echo "$$WORK_DIR" >> $$COMPLETED_DIR/$${JOB_ID}.flag

# Move job script to completed
SUBMITTED_DIR="$$CHASQUI_DIR/submitted"
mv $$SUBMITTED_DIR/$${JOB_ID}.sh $$COMPLETED_DIR/ 2>/dev/null

# Log completion
AGENT_LOG="$$CHASQUI_DIR/logs/agent.log"
echo "$$(date -Iseconds) JOB_COMPLETE job=$$JOB_ID pbs=$$PBS_JOBID status=$$STATUS exit_code=$$EXIT_CODE work_dir=$$WORK_DIR" >> $$AGENT_LOG

# Trigger agent to submit waiting jobs (with file lock)
echo "Triggering agent to submit next jobs..."
flock -n $$CHASQUI_DIR/agent.lock -c "bash $$CHASQUI_DIR/agent.sh" &

# Exit with original VASP exit code
exit $$EXIT_CODE
"""

# %% ../04_templates.ipynb 6
def generate_pbs_script(
    job_id: str,
    work_dir: str,
    job_name: Optional[str] = None,
    cores: int = 1,
    walltime: str = "48:00:00",
    project: str = "AARC1",
    vasp_version: str = "vasp_gam",
    chasqui_remote_dir: str = "~/chasqui_remote",
    output_path: Optional[str] = None
) -> str:
    """
    Generate PBS submission script for VASP job.
    
    Args:
        job_id: Unique job identifier (UUID from database)
        work_dir: Remote directory where VASP will run (contains POSCAR, INCAR, etc.)
        job_name: Human-readable job name (default: job_id)
        cores: Number of compute nodes to request (default: 1)
        walltime: Maximum runtime in HH:MM:SS format (default: "48:00:00")
        project: PBS account/project code (default: "AARC1")
        vasp_version: VASP executable name (default: "vasp_gam")
        chasqui_remote_dir: Remote chasqui directory (default: "~/chasqui_remote")
        output_path: If provided, write script to this file
        
    Returns:
        PBS script content as string
        
    Example:
        >>> script = generate_pbs_script(
        ...     job_id="abc-123-def",
        ...     work_dir="~/scratch/vasp_jobs/abc-123-def",
        ...     job_name="Au_bulk_relax",
        ...     cores=2,
        ...     walltime="24:00:00",
        ...     project="MyProject",
        ...     vasp_version="vasp_std"
        ... )
    """
    # Use job_id as name if not provided
    if job_name is None:
        job_name = f"chasqui_{job_id[:8]}"
    
    # Substitute template variables
    template = Template(PBS_TEMPLATE)
    script = template.safe_substitute(
        JOB_ID=job_id,
        JOB_NAME=job_name,
        WORK_DIR=work_dir,
        CORES=cores,
        TIME=walltime,
        PROJECT=project,
        VASP=vasp_version,
        CHASQUI_DIR=chasqui_remote_dir
    )
    
    # Write to file if requested
    if output_path:
        output_file = Path(output_path)
        output_file.parent.mkdir(parents=True, exist_ok=True)
        output_file.write_text(script)
    
    return script

# %% ../04_templates.ipynb 8
def generate_pbs_script_from_job(
    job: Dict[str, Any],
    output_path: Optional[str] = None
) -> str:
    """
    Generate PBS script from database job entry.
    
    Args:
        job: Job dictionary from ChasquiDB.get_job()
        output_path: Optional path to write script
        
    Returns:
        PBS script content as string
        
    Example:
        >>> from chasqui.database import ChasquiDB
        >>> db = ChasquiDB()
        >>> job = db.get_job("abc-123")
        >>> script = generate_pbs_script_from_job(job)
        
    Note:
        If 'remote_work_dir' is not in vasp_config, it defaults to:
        ~/scratch/vasp_jobs/<job_id>
    """
    import json
    
    # Extract VASP config if present
    vasp_config = {}
    if job.get('vasp_config'):
        vasp_config = json.loads(job['vasp_config'])
    
    # Determine work directory
    # Priority: config > remote_path field > default convention
    work_dir = vasp_config.get('remote_work_dir') or \
               job.get('remote_path') or \
               f"~/scratch/vasp_jobs/{job['job_id']}"
    
    # Generate script with config parameters
    return generate_pbs_script(
        job_id=job['job_id'],
        work_dir=work_dir,
        job_name=vasp_config.get('job_name'),
        cores=vasp_config.get('cores', 1),
        walltime=vasp_config.get('walltime', '48:00:00'),
        project=vasp_config.get('project', 'AARC1'),
        vasp_version=vasp_config.get('vasp_version', 'vasp_gam'),
        chasqui_remote_dir=vasp_config.get('chasqui_remote_dir', '~/chasqui_remote'),
        output_path=output_path
    )

# %% ../04_templates.ipynb 10
def validate_pbs_script(script: str) -> bool:
    """
    Validate that PBS script has required elements.
    
    Args:
        script: PBS script content
        
    Returns:
        True if script looks valid
        
    Raises:
        ValueError: If script is missing required elements
    """
    required_elements = [
        '#!/bin/bash',
        '#PBS -N',
        '#PBS -l select=',
        '#PBS -l walltime=',
        'WORK_DIR=',
        'cd $WORK_DIR',
        'module load vasp',
        'mpirun',
        'EXIT_CODE',
        'DONE',
        'FAIL',
        'agent.sh'
    ]
    
    missing = []
    for element in required_elements:
        if element not in script:
            missing.append(element)
    
    if missing:
        raise ValueError(f"PBS script missing required elements: {missing}")
    
    return True
